Тренировочное задание по программированию: Тесты для функции GetDistinctRealRootCount

Функция

int GetDistinctRealRootCount(double a, double b, double c);

возвращает количество уникальных действительных корней уравнения ax² + bx + c = 0.
Разработайте набор юнит-тестов для проверки корректности реализации этой функции. 
Случай, когда все три коэффициента равны нулю, тестировать не надо.

Начать работу вы можете с шаблона, который содержит наш фреймворк юнит-тест и заготовку функции GetDistinctRealRootCount. 

test_equation.cpp

"Белый пояс" -> "Задание по программированию: Уравнение": https://www.coursera.org/learn/c-plus-plus-white/programming/jRy5s/uravnieniie

Заготовка функции, определение:


int GetDistinctRealRootCount(double A, double B, double C) {
  int result = 0;
  // найдём дискриминант
  double D = B * B - 4 * A * C;
  cout << fixed << "GDRRC: A " << A << " B " << B << " C " << C << " D " << D << endl;
  // Вы можете вставлять сюда различные реализации функции,
  // чтобы проверить, что ваши тесты пропускают корректный код
  // и ловят некорректный
  // если A равно нулю, то уравнение линейное: Bx + C = 0
  if (A == 0) {
    // Bx = -C => x = -C / B
    if (B != 0) {
      cout << -C / B << endl;
      result = 1;
    }
    // если B равно нулю, корней нет
  } else if (D == 0) {  // случай с нулевым дискриминантом
    // корень ровно один
    cout << -B / (2 * A) << endl;
    result = 1;
  } else if (D > 0) {  // в случае с положительным дискриминантом корня два
    double r1 = (-B + sqrt(D)) / (2 * A);
    double r2 = (-B - sqrt(D)) / (2 * A);
    cout << r1 << " " << r2 << endl;
    result = 2;
  }
  // если дискриминант отрицателен, действительных корней нет
  return result;
}
